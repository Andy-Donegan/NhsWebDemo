"use strict";var __extends=this&&this.__extends||function(){var n=function(t,o){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var e in o)o.hasOwnProperty(e)&&(t[e]=o[e])})(t,o)};return function(t,o){function e(){this.constructor=t}n(t,o),t.prototype=null===o?Object.create(o):(e.prototype=o.prototype,new e)}}();import Annotation from"../Annotations.js";import CrookedLine from"./CrookedLine.js";import U from"../../../Core/Utilities.js";var merge=U.merge,ElliottWave=function(e){function t(t,o){return e.call(this,t,o)||this}return __extends(t,e),t.prototype.addLabels=function(){this.getPointsOptions().forEach(function(t,o){var e=this.options.typeOptions,e=this.initLabel(merge(t.label,{text:e.labels[o],point:function(t){return t.annotation.points[o]}}),!1);t.label=e.options},this)},t}(CrookedLine);ElliottWave.prototype.defaultOptions=merge(CrookedLine.prototype.defaultOptions,{typeOptions:{labels:["(0)","(A)","(B)","(C)","(D)","(E)"],line:{strokeWidth:1}},labelOptions:{align:"center",allowOverlap:!0,crop:!0,overflow:"none",type:"rect",backgroundColor:"none",borderWidth:0,y:-5}});export default Annotation.types.elliottWave=ElliottWave;