"use strict";var __extends=this&&this.__extends||function(){var o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i])})(t,n)};return function(t,n){function i(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();import Annotation from"../Annotations.js";import InfinityLine from"./InfinityLine.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";var merge=U.merge,Pitchfork=function(i){function e(t,n){return i.call(this,t,n)||this}return __extends(e,i),e.outerLineEdgePoint=function(o){return function(t){var n=t.annotation,i=n.points;return e.findEdgePoint(i[o],i[0],new MockPoint(n.chart,t,n.midPointOptions()))}},e.findEdgePoint=function(t,n,i){n=Math.atan2(i.plotY-n.plotY,i.plotX-n.plotX);return{x:t.plotX+1e7*Math.cos(n),y:t.plotY+1e7*Math.sin(n)}},e.middleLineEdgePoint=function(t){var n=t.annotation,i=n.points;return InfinityLine.findEdgePoint(i[0],new MockPoint(n.chart,t,n.midPointOptions()))},e.prototype.midPointOptions=function(){var t=this.points;return{x:(t[1].x+t[2].x)/2,y:(t[1].y+t[2].y)/2,xAxis:t[0].series.xAxis,yAxis:t[0].series.yAxis}},e.prototype.addShapes=function(){this.addLines(),this.addBackgrounds()},e.prototype.addLines=function(){this.initShape({type:"path",points:[this.points[0],e.middleLineEdgePoint]},0),this.initShape({type:"path",points:[this.points[1],e.topLineEdgePoint]},1),this.initShape({type:"path",points:[this.points[2],e.bottomLineEdgePoint]},2)},e.prototype.addBackgrounds=function(){var t=this.shapes,n=this.options.typeOptions,i=this.initShape(merge(n.innerBackground,{type:"path",points:[function(t){var n=t.annotation,t=n.points,n=n.midPointOptions();return{x:(t[1].x+n.x)/2,y:(t[1].y+n.y)/2,xAxis:n.xAxis,yAxis:n.yAxis}},t[1].points[1],t[2].points[1],function(t){var n=t.annotation,t=n.points,n=n.midPointOptions();return{x:(n.x+t[2].x)/2,y:(n.y+t[2].y)/2,xAxis:n.xAxis,yAxis:n.yAxis}}]}),3),t=this.initShape(merge(n.outerBackground,{type:"path",points:[this.points[1],t[1].points[1],t[2].points[1],this.points[2]]}),4);n.innerBackground=i.options,n.outerBackground=t.options},e.topLineEdgePoint=e.outerLineEdgePoint(1),e.bottomLineEdgePoint=e.outerLineEdgePoint(0),e}(InfinityLine);Pitchfork.prototype.defaultOptions=merge(InfinityLine.prototype.defaultOptions,{typeOptions:{innerBackground:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0},outerBackground:{fill:"rgba(156, 229, 161, 0.4)",strokeWidth:0}}});export default Annotation.types.pitchfork=Pitchfork;