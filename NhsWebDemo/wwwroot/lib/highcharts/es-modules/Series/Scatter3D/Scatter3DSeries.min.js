"use strict";var __extends=this&&this.__extends||function(){var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};return function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}();import Math3D from"../../Extensions/Math3D.js";var pointCameraDistance=Math3D.pointCameraDistance;import Scatter3DPoint from"./Scatter3DPoint.js";import ScatterSeries from"../Scatter/ScatterSeries.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import U from"../../Core/Utilities.js";var extend=U.extend,merge=U.merge,Scatter3DSeries=function(r){function t(){var t=null!==r&&r.apply(this,arguments)||this;return t.data=void 0,t.options=void 0,t.points=void 0,t}return __extends(t,r),t.prototype.pointAttribs=function(t){var e=r.prototype.pointAttribs.apply(this,arguments);return this.chart.is3d()&&t&&(e.zIndex=pointCameraDistance(t,this.chart)),e},t.defaultOptions=merge(ScatterSeries.defaultOptions,{tooltip:{pointFormat:"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>z: <b>{point.z}</b><br/>"}}),t}(ScatterSeries);extend(Scatter3DSeries.prototype,{axisTypes:["xAxis","yAxis","zAxis"],directTouch:!0,parallelArrays:["x","y","z"],pointArrayMap:["x","y","z"],pointClass:Scatter3DPoint}),SeriesRegistry.registerSeriesType("scatter3d",Scatter3DSeries);export default Scatter3DSeries;