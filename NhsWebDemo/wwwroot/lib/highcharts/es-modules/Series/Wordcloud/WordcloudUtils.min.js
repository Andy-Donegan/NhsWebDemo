"use strict";import H from"../../Core/Globals.js";var deg2rad=H.deg2rad;import U from"../../Core/Utilities.js";var extend=U.extend,find=U.find,isNumber=U.isNumber,isObject=U.isObject,merge=U.merge;function isRectanglesIntersecting(t,e){return!(e.left>t.right||e.right<t.left||e.top>t.bottom||e.bottom<t.top)}function getNormals(t,e){var o=e[0]-t[0],t=e[1]-t[1];return[[-t,o],[t,-o]]}function getAxesFromPolygon(t){var i=t.axes||[];return i.length||(i=[],t.concat([t[0]]).reduce(function(t,e){var o=getNormals(t,e)[0];return find(i,function(t){return t[0]===o[0]&&t[1]===o[1]})||i.push(o),e}),t.axes=i),i}function project(t,o){t=t.map(function(t){var e=t[0],t=t[1];return e*o[0]+t*o[1]});return{min:Math.min.apply(this,t),max:Math.max.apply(this,t)}}function isPolygonsOverlappingOnAxis(t,e,o){e=project(e,t),t=project(o,t);return!!(t.min>e.max||t.max<e.min)}function isPolygonsColliding(e,o){var t=getAxesFromPolygon(e),i=getAxesFromPolygon(o),i=t.concat(i);return!find(i,function(t){return isPolygonsOverlappingOnAxis(t,e,o)})}function intersectsAnyWord(o,t){function i(t){var e=isRectanglesIntersecting(r,t.rect);return e=e&&(o.rotation%90||t.rotation%90)?isPolygonsColliding(n,t.polygon):e}var e=!1,r=o.rect,n=o.polygon,a=o.lastCollidedWith;return a&&((e=i(a))||delete o.lastCollidedWith),e=e||!!find(t,function(t){var e=i(t);return e&&(o.lastCollidedWith=t),e})}function archimedeanSpiral(t,e){var o=e.field,i=!1,e=o.width*o.width+o.height*o.height,o=.8*t;return t<=1e4&&(i={x:o*Math.cos(o),y:o*Math.sin(o)},Math.min(Math.abs(i.x),Math.abs(i.y))<e||(i=!1)),i}function squareSpiral(t,e){function o(t){return"boolean"==typeof t}var i=4*t,r=Math.ceil((Math.sqrt(i)-1)/2),n=2*r+1,a=Math.pow(n,2),l=!1;return--n,t<=1e4&&(o(l)&&a-n<=i&&(l={x:r-(a-i),y:-r}),a-=n,o(l)&&a-n<=i&&(l={x:-r,y:a-i-r}),a-=n,(l=o(l)?a-n<=i?{x:a-i-r,y:r}:{x:r,y:r-(a-i-n)}:l).x*=5,l.y*=5),l}function rectangularSpiral(t,e){t=squareSpiral(t,e),e=e.field;return t&&(t.x*=e.ratioX,t.y*=e.ratioY),t}function getRandomPosition(t){return Math.round(t*(Math.random()+.5)/2)}function getScale(t,e,o){var i=2*Math.max(Math.abs(o.top),Math.abs(o.bottom)),o=2*Math.max(Math.abs(o.left),Math.abs(o.right));return Math.min(0<o?1/o*t:1,0<i?1/i*e:1)}function getPlayingField(t,e,o){var i=o.reduce(function(t,e){var o=e.dimensions,e=Math.max(o.width,o.height);return t.maxHeight=Math.max(t.maxHeight,o.height),t.maxWidth=Math.max(t.maxWidth,o.width),t.area+=e*e,t},{maxHeight:0,maxWidth:0,area:0}),o=Math.max(i.maxHeight,i.maxWidth,.85*Math.sqrt(i.area)),i=e<t?t/e:1,t=t<e?e/t:1;return{width:o*i,height:o*t,ratioX:i,ratioY:t}}function getRotation(t,e,o,i){var r=!1;return r=isNumber(t)&&isNumber(e)&&isNumber(o)&&isNumber(i)&&0<t&&-1<e&&o<i?o+e%t*((i-o)/(t-1||1)):r}function getSpiral(t,e){for(var o=[],i=1;i<1e4;i++)o.push(t(i,e));return function(t){return t<=1e4&&o[t-1]}}function outsidePlayingField(t,e){var o=-e.width/2,i=e.width/2,r=-e.height/2,e=e.height/2;return!(o<t.left&&i>t.right&&r<t.top&&e>t.bottom)}function movePolygon(e,o,t){return t.map(function(t){return[t[0]+e,t[1]+o]})}function intersectionTesting(t,e){var o=e.placed,i=e.field,r=e.rectangle,n=e.polygon,a=e.spiral,l=1,g={x:0,y:0},u=t.rect=extend({},r);for(t.polygon=n,t.rotation=e.rotation;!1!==g&&(intersectsAnyWord(t,o)||outsidePlayingField(u,i));)g=a(l),isObject(g)&&(u.left=r.left+g.x,u.right=r.right+g.x,u.top=r.top+g.y,u.bottom=r.bottom+g.y,t.polygon=movePolygon(g.x,g.y,n)),l++;return g}function extendPlayingField(t,e){var o,i,r,t=isObject(t)&&isObject(e)?(r=e.bottom-e.top,o=e.right-e.left,i=t.ratioX,e=t.ratioY,merge(t,{width:t.width+2*((r=r*e<o*i?o:r)*i),height:t.height+2*(r*e)})):t;return t}function updateFieldBoundaries(t,e){return(!isNumber(t.left)||t.left>e.left)&&(t.left=e.left),(!isNumber(t.right)||t.right<e.right)&&(t.right=e.right),(!isNumber(t.top)||t.top>e.top)&&(t.top=e.top),(!isNumber(t.bottom)||t.bottom<e.bottom)&&(t.bottom=e.bottom),t}function correctFloat(t,e){e=isNumber(e)?e:14,e=Math.pow(10,e);return Math.round(t*e)/e}function getBoundingBoxFromPolygon(t){return t.reduce(function(t,e){var o=e[0],e=e[1];return t.left=Math.min(o,t.left),t.right=Math.max(o,t.right),t.bottom=Math.max(e,t.bottom),t.top=Math.min(e,t.top),t},{left:Number.MAX_VALUE,right:-Number.MAX_VALUE,bottom:-Number.MAX_VALUE,top:Number.MAX_VALUE})}function getPolygon(t,e,o,i,r){var n=[t,e],a=t-o/2,t=t+o/2,o=e-i/2,i=e+i/2;return[[a,o],[t,o],[t,i],[a,i]].map(function(t){return rotate2DToPoint(t,n,-r)})}function rotate2DToOrigin(t,e){var o=t[0],i=t[1],t=deg2rad*-e,e=Math.cos(t),t=Math.sin(t);return[correctFloat(o*e-i*t),correctFloat(o*t+i*e)]}function rotate2DToPoint(t,e,o){o=rotate2DToOrigin([t[0]-e[0],t[1]-e[1]],o);return[o[0]+e[0],o[1]+e[1]]}var WordcloudUtils={archimedeanSpiral:archimedeanSpiral,extendPlayingField:extendPlayingField,getBoundingBoxFromPolygon:getBoundingBoxFromPolygon,getPlayingField:getPlayingField,getPolygon:getPolygon,getRandomPosition:getRandomPosition,getRotation:getRotation,getScale:getScale,getSpiral:getSpiral,intersectionTesting:intersectionTesting,isPolygonsColliding:isPolygonsColliding,isRectanglesIntersecting:isRectanglesIntersecting,rectangularSpiral:rectangularSpiral,rotate2DToOrigin:rotate2DToOrigin,rotate2DToPoint:rotate2DToPoint,squareSpiral:squareSpiral,updateFieldBoundaries:updateFieldBoundaries};export default WordcloudUtils;