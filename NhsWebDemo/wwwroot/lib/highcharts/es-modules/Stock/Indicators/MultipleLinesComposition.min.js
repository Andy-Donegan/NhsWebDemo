"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../Core/Utilities.js";var MultipleLinesComposition,defined=U.defined,error=U.error,merge=U.merge;!function(e){var i=[],r=["bottomLine"],o=["top","bottom"],a=["top"];function n(e){var t,i=this,r=[],o=[];if(e=e||this.points,i.fillGraph&&i.nextPoints){if((t=SMAIndicator.prototype.getGraphPath.call(i,i.nextPoints))&&t.length){t[0][0]="L";for(var r=SMAIndicator.prototype.getGraphPath.call(i,e),a=(o=t.slice(0,r.length)).length-1;0<=a;a--)r.push(o[a])}}else r=SMAIndicator.prototype.getGraphPath.apply(i,arguments);return r}function s(){var i,r=this,e=r.pointValKey,t=r.linesApiNames,o=r.areaLinesNames,a=r.points,n=r.options,s=r.graph,p={options:{gapSize:n.gapSize}},l=[],h=r.getTranslatedLinesNames(e),c=a.length;h.forEach(function(e,t){for(l[t]=[];c--;)i=a[c],l[t].push({x:i.x,plotX:i.plotX,plotY:i[e],isNull:!defined(i[e])});c=a.length}),this.userOptions.fillColor&&o.length&&(e=h.indexOf(f(o[0])),e=l[e],h=1===o.length?a:l[h.indexOf(f(o[1]))],o=r.color,r.points=h,r.nextPoints=e,r.color=this.userOptions.fillColor,r.options=merge(a,p),r.graph=r.area,r.fillGraph=!0,SeriesRegistry.seriesTypes.sma.prototype.drawGraph.call(r),r.area=r.graph,delete r.nextPoints,delete r.fillGraph,r.color=o),t.forEach(function(e,t){l[t]?(r.points=l[t],n[e]?r.options=merge(n[e].styles,p):error('Error: "There is no '+e+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names." at mixin/multiple-line.js:34'),r.graph=r["graph"+e],SMAIndicator.prototype.drawGraph.call(r),r["graph"+e]=r.graph):error('Error: "'+e+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),r.points=a,r.options=n,r.graph=s,SMAIndicator.prototype.drawGraph.call(r)}function p(t){var i=[];return(this.pointArrayMap||[]).forEach(function(e){e!==t&&i.push(f(e))}),i}function f(e){return"plot"+e.charAt(0).toUpperCase()+e.slice(1)}function l(t){var i=[];return(this.pointArrayMap||[]).forEach(function(e){i.push(t[e])}),i}function h(){var r,o=this,e=o.pointArrayMap,a=o.getTranslatedLinesNames();SMAIndicator.prototype.translate.apply(o,arguments),o.points.forEach(function(i){e.forEach(function(e,t){r=i[e],null!==(r=o.dataModify?o.dataModify.modifyValue(r):r)&&(i[a[t]]=o.yAxis.toPixels(r,!0))})})}e.compose=function(e){var t;return-1===i.indexOf(e)&&(i.push(e),(t=e.prototype).linesApiNames=t.linesApiNames||r.slice(),t.pointArrayMap=t.pointArrayMap||o.slice(),t.pointValKey=t.pointValKey||"top",t.areaLinesNames=t.areaLinesNames||a.slice(),t.drawGraph=s,t.getGraphPath=n,t.toYData=l,t.translate=h,t.getTranslatedLinesNames=p),e}}(MultipleLinesComposition=MultipleLinesComposition||{});export default MultipleLinesComposition;