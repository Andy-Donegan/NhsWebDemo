"use strict";var __extends=this&&this.__extends||function(){var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};return function(e,t){function o(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}();import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../../Core/Utilities.js";var correctFloat=U.correctFloat,extend=U.extend,merge=U.merge,KeltnerChannelsIndicator=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.data=void 0,e.options=void 0,e.points=void 0,e}return __extends(e,t),e.prototype.init=function(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments),this.options=merge({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)},e.prototype.getValues=function(e,t){var o,i,r,n,s,p=t.period,a=t.periodATR,l=t.multiplierATR,d=t.index,t=e.yData,m=t?t.length:0,c=[],u=SeriesRegistry.seriesTypes.ema.prototype.getValues(e,{period:p,index:d}),y=SeriesRegistry.seriesTypes.atr.prototype.getValues(e,{period:a}),h=[],f=[];if(!(m<p)){for(s=p;s<=m;s++)r=u.values[s-p],n=y.values[s-a],i=r[0],o=correctFloat(r[1]+l*n[1]),n=correctFloat(r[1]-l*n[1]),r=r[1],c.push([i,o,r,n]),h.push(i),f.push([o,r,n]);return{values:c,xData:h,yData:f}}},e.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:0,period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"},lineWidth:1}),e}(SMAIndicator);extend(KeltnerChannelsIndicator.prototype,{nameBase:"Keltner Channels",areaLinesNames:["top","bottom"],nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(KeltnerChannelsIndicator),SeriesRegistry.registerSeriesType("keltnerchannels",KeltnerChannelsIndicator);export default KeltnerChannelsIndicator;