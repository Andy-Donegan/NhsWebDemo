"use strict";var __extends=this&&this.__extends||function(){var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)};return function(t,e){function o(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}();import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../../Core/Utilities.js";var correctFloat=U.correctFloat,extend=U.extend,isArray=U.isArray,merge=U.merge,DMIIndicator=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.options=void 0,t}return __extends(t,e),t.prototype.calculateDM=function(t,e,o){var i=t[e][1],r=t[e][2],s=t[e-1][1],e=t[e-1][2],r=e-r<i-s?o?Math.max(i-s,0):0:o?0:Math.max(e-r,0);return correctFloat(r)},t.prototype.calculateDI=function(t,e){return t/e*100},t.prototype.calculateDX=function(t,e){return correctFloat(Math.abs(t-e)/Math.abs(t+e)*100)},t.prototype.smoothValues=function(t,e,o){return correctFloat(t-t/o+e)},t.prototype.getTR=function(t,e){return correctFloat(Math.max(t[1]-t[2],e?Math.abs(t[1]-e[3]):0,e?Math.abs(t[2]-e[3]):0))},t.prototype.getValues=function(t,e){var o=e.period,i=t.xData,r=t.yData,s=r?r.length:0,a=[],n=[],l=[];if(!(i.length<=o)&&isArray(r[0])&&4===r[0].length){for(var p=0,c=0,u=0,h=1;h<s;h++){var y,D,m,I=void 0,d=void 0,f=void 0,M=void 0,v=void 0,g=void 0;h<=o?(p+=I=this.calculateDM(r,h,!0),c+=d=this.calculateDM(r,h),u+=f=this.getTR(r[h],r[h-1]),h===o&&(M=this.calculateDI(p,u),v=this.calculateDI(c,u),g=this.calculateDX(p,c),a.push([i[h],g,M,v]),n.push(i[h]),l.push([g,M,v]))):(I=this.calculateDM(r,h,!0),d=this.calculateDM(r,h),f=this.getTR(r[h],r[h-1]),y=this.smoothValues(p,I,o),D=this.smoothValues(c,d,o),m=this.smoothValues(u,f,o),c=D,M=this.calculateDI(p=y,u=m),v=this.calculateDI(c,u),g=this.calculateDX(p,c),a.push([i[h],g,M,v]),n.push(i[h]),l.push([g,M,v]))}return{values:a,xData:n,yData:l}}},t.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">DX</span>: {point.y}<br/><span style="color: {point.series.options.plusDILine.styles.lineColor}">+DI</span>: {point.plusDI}<br/><span style="color: {point.series.options.minusDILine.styles.lineColor}">-DI</span>: {point.minusDI}<br/>'},plusDILine:{styles:{lineWidth:1,lineColor:"#06b535"}},minusDILine:{styles:{lineWidth:1,lineColor:"#f21313"}},dataGrouping:{approximation:"averages"}}),t}(SMAIndicator);extend(DMIIndicator.prototype,{areaLinesNames:[],nameBase:"DMI",linesApiNames:["plusDILine","minusDILine"],pointArrayMap:["y","plusDI","minusDI"],parallelArrays:["x","y","plusDI","minusDI"],pointValKey:"y"}),MultipleLinesComposition.compose(DMIIndicator),SeriesRegistry.registerSeriesType("dmi",DMIIndicator);export default DMIIndicator;