"use strict";import Geometry from"./GeometryUtilities.js";var CircleUtilities,getAngleBetweenPoints=Geometry.getAngleBetweenPoints,getCenterOfPoints=Geometry.getCenterOfPoints,getDistanceBetweenPoints=Geometry.getDistanceBetweenPoints;!function(e){function a(e,t){t=Math.pow(10,t);return Math.round(e*t)/t}function o(e){if(e<=0)throw new Error("radius of circle must be a positive number.");return Math.PI*e*e}function s(e,t){return e*e*Math.acos(1-t/e)-(e-t)*Math.sqrt(t*(2*e-t))}function c(e,t){var n,r,i,o,s=getDistanceBetweenPoints(e,t),c=e.r,u=t.r,l=[];return s<c+u&&s>Math.abs(c-u)&&(n=((i=c*c)-u*u+s*s)/(2*s),r=Math.sqrt(i-n*n),o=e.x,c=t.x,e=(u=e.y)+n*((i=t.y)-u)/s,t=r/s*-(c-o),l=[{x:a((o=o+n*(c-o)/s)+(u=r/s*-(i-u)),14),y:a(e-t,14)},{x:a(o-u,14),y:a(e+t,14)}]),l}function n(e){return e.reduce(function(e,o,s,t){t=t.slice(s+1).reduce(function(e,t,n,r){var i=[s,n+s+1];return e.concat(c(o,t).map(function(e){return e.indexes=i,e}))},[]);return e.concat(t)},[])}function r(e,t){return getDistanceBetweenPoints(e,t)<=t.r+1e-10}function i(t,e){return!e.some(function(e){return!r(t,e)})}function u(t){return n(t).filter(function(e){return i(e,t)})}e.round=a,e.getAreaOfCircle=o,e.getCircularSegmentArea=s,e.getOverlapBetweenCircles=function(e,t,n){var r,i=0;return i=n<e+t?a(i=n<=Math.abs(t-e)?o(e<t?e:t):(n=n-(r=(e*e-t*t+n*n)/(2*n)),s(e,e-r)+s(t,t-n)),14):i},e.getCircleCircleIntersection=c,e.getCirclesIntersectionPoints=n,e.isCircle1CompletelyOverlappingCircle2=function(e,t){return getDistanceBetweenPoints(e,t)+t.r<e.r+1e-10},e.isPointInsideCircle=r,e.isPointInsideAllCircles=i,e.isPointOutsideAllCircles=function(t,e){return!e.some(function(e){return r(t,e)})},e.getCirclesIntersectionPolygon=u,e.getAreaOfIntersectionBetweenCircles=function(c){var e,t,n,r=u(c);return 1<r.length&&(t=getCenterOfPoints(r),n=(r=r.map(function(e){return e.angle=getAngleBetweenPoints(t,e),e}).sort(function(e,t){return t.angle-e.angle}))[r.length-1],0===(r=r.reduce(function(e,i){var t,o=e.startPoint,s=getCenterOfPoints([o,i]),n=i.indexes.filter(function(e){return-1<o.indexes.indexOf(e)}).reduce(function(e,t){var n=c[t],r=getAngleBetweenPoints(n,i),t=getAngleBetweenPoints(n,o),r=t-(t-r+(t<r?2*Math.PI:0))/2,r=getDistanceBetweenPoints(s,{x:n.x+n.r*Math.sin(r),y:n.y+n.r*Math.cos(r)}),n=n.r;return 2*n<r&&(r=2*n),e=!e||e.width>r?{r:n,largeArc:n<r?1:0,width:r,x:i.x,y:i.y}:e},null);return n&&(t=n.r,e.arcs.push(["A",t,t,0,n.largeArc,1,n.x,n.y]),e.startPoint=i),e},{startPoint:n,arcs:[]}).arcs).length||1===r.length||(r.unshift(["M",n.x,n.y]),e={center:t,d:r})),e}}(CircleUtilities=CircleUtilities||{});export default CircleUtilities;